@use "sass:color";
@import './config.scss';

$dark: #2c3e50;
$medium: #34495e;
$light: #7f8c8d;
$theme: map-get($docs-primary, default);
$border: #dddddd;
$codebg: #f8f8f8;
$shadow: rgba(0, 0, 0, 0.5);
$red: #ff6666;
$info: #1c90f3;

// font sizes
$body-font-size: 15px;
$code-font-size: 0.9em;

@keyframes outline-blink {
  $c: map-get($docs-primary, default);
  $tc: color.change($c, $alpha: 0);
  from {
    outline-color: $tc;
  }
  50% {
    outline-color: $c;
  }
  to {
    outline-color: $tc;
  }
}
[markdown] :target {
  outline: solid 2px;
  animation: outline-blink 0.8s 5 forwards;
}

[markdown] {
  min-width: 0;
  * {
    scroll-behavior: smooth;
    scroll-margin: 20px;
  }
  .text-align-center {
    text-align: center;
  }
  p,
  dd {
    word-spacing: 0.05em;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-weight: 600;
    color: map-get($docs-primary, 900);
    position: relative;
    @media screen {
      a.header-anchor {
        position: absolute;
        left: 0;
        padding: 0 0.25em;
        transform: translateX(-100%);
        color: map-get($docs-primary, 900);
        opacity: 0;
        transition: all 0.2s;
        &::before {
          content: '¶';
        }
      }
      &:hover a.header-anchor {
        opacity: 1;
      }
    }
  }
  h1,
  h2,
  h3 {
    page-break-after: avoid;
  }
  br {
    word-spacing: 0;
  }
  a {
    text-decoration: none;
    color: map-get($docs-primary, 500);
    &:hover {
      color: map-get($docs-primary, 700);
    }
    &:active {
      color: map-get($docs-primary, 600);
    }
    &.footnote-backref {
      user-select: none;
    }
    @media print {
      text-decoration: underline;
    }
  }
  p,
  dt,
  dd,
  summary {
    margin: 0.8em 0;
  }
  mark {
    @media print {
      border: 2px solid yellow !important;
      background: none;
    }
  }
  abbr[title] {
    cursor: help;
    text-decoration: none;
    border-bottom: 1px dotted #777;
    @media print {
      &:after {
        content: '(' attr(title) ')';
        color: #777;
      }
    }
  }

  .katex-error {
    color: red;
  }
  p.katex-block {
    page-break-before: avoid;
    page-break-inside: avoid;
    position: relative;
    > .katex-display {
      margin: 0;
      > .katex {
        overflow-x: visible;
        overflow-y: hidden;
      }
    }
  }
  span.katex {
    &:before,
    &:after {
      content: ' ';
      user-select: none;
    }
    .katex-html,
    semantics > :not(annotation) {
      user-select: none;
    }
  }

  code:not([is]),
  kbd,
  samp {
    font-size: $code-font-size;
    background-color: #f8f8f8;
    @media print {
      background-color: white !important;
    }
  }

  kbd {
    display: inline-block;
    white-space: nowrap;
    border-radius: 3px;
    padding: 2px 6px;
    box-shadow: 0 0 2px 1px $shadow;
    margin: 0 2px;
    font-size: small;
    background: #eee;
    color: #222;
    font-variant: small-caps;
    font-weight: 600;
    letter-spacing: 0.5px;
    line-height: 1em;
    @media print {
      background: #fff;
      color: #000;
      box-shadow: none;
      border: 2px solid $border;
    }
    &:hover {
      color: #000;
      box-shadow: 0 0 2px 2px $shadow;
    }
  }

  code:not([is]) {
    display: inline-block;
    color: map-get($docs-accent, text);
    padding: 0 2px;
    margin: 0 2px;
    border: 1px solid #eee;
    border-radius: 2px;
    vertical-align: text-bottom;
    @media print {
      border: rgba(map-get($docs-accent, A700), 0.25) solid 1px;
    }
  }

  img {
    max-width: 100%;
  }

  figure {
    margin: 1em auto 0.75em;
    min-width: 240px;
    display: table;
    page-break-inside: avoid;
    img {
      display: block;
      margin: auto;
    }
    > figcaption {
      display: table-caption;
      caption-side: bottom;
    }
  }

  figcaption,
  caption {
    text-align: center;
    margin: 0.3em auto;
    font-weight: bolder;
    font-size: 14px;
    color: map-get($docs-primary, 900);
  }
  caption {
    page-break-after: avoid;
  }
  figcaption {
    page-break-before: avoid;
  }

  pre:not([mermaid]):not([chart]) {
    background-color: $codebg;
    padding: 1em 0.5em;
    margin: 1.2em 0;
    border-radius: 4px;
    box-shadow: 0 0 4px $shadow;
    @media print {
      background-color: white;
    }
  }
  code[is='md-highlight'] {
    font-size: $body-font-size;
    &[language='mermaid'],
    &[language='chart'] {
      display: block;
      overflow-x: auto;
      position: relative;
      margin: 1em 0;
      page-break-inside: avoid;
      > * {
        display: block;
        margin: auto;
      }

      svg * {
        user-select: none;
      }
    }
  }

  // embed videos
  .block-embed {
    display: flex;
    width: 100%;
    max-width: 720px;
    user-select: none;
    margin: 1em auto;
    page-break-inside: avoid;
    @media screen {
      &::before {
        display: block;
        padding-bottom: 60%;
        content: '';
      }
    }
    > * {
      flex: auto;
    }
    .block-embed-hint {
      display: none;
    }

    @media print {
      > * {
        display: none;
      }
      .block-embed-hint {
        display: block;
        text-decoration: $theme underline;
      }
    }
  }

  // block quotes and def lists
  @mixin quote-color($palette, $char: false) {
    $quotebg: rgba(map-get($palette, A100), 0.05);
    $quotebd: rgba(map-get($palette, A200), 0.2);
    $qoutefg: map-get($palette, 400);
    background-color: $quotebg;
    @media print {
      background: white !important;
    }
    border: 0.02px solid $quotebd;
    border-left: 4px solid $qoutefg;
    @if $char {
      @media screen {
        &::before {
          content: $char;
          background-color: $qoutefg;
          @if (lightness($qoutefg) > 60) {
            color: #000;
          } @else {
            color: #fff;
          }
          color: #fff;
        }
      }
    }
  }

  dl,
  blockquote,
  [is='md-container'],
  details {
    position: relative;
    margin: 1em 0;
    padding: 0 12px 0 20px;
    page-break-inside: avoid;
    @include quote-color($docs-primary);
    &::before {
      user-select: none;
      position: absolute;
      transform: translate(-32px, 8px);
      width: 20px;
      height: 20px;
      border-radius: 100%;
      text-align: center;
      line-height: 20px;
      font-weight: bold;
      font-size: 14px;
    }
  }
  [is='md-container'] {
    &[class='tip'] {
      @include quote-color($docs-primary, '!');
    }
    &[class='info'] {
      @include quote-color($mat-blue, 'i');
    }
    &[class='warning'] {
      @include quote-color($mat-orange, '!');
    }
    &[class='error'] {
      @include quote-color($mat-red, '☓');
    }
    &[class='success'] {
      @include quote-color($mat-light-green, '✓');
    }
    &[class='fail'] {
      @include quote-color($mat-red, '✗');
    }
    &[class='question'] {
      @include quote-color($mat-amber, '?');
    }
  }
  dl {
    @include quote-color($mat-teal);
  }

  [is='md-container'] > summary {
    display: block;
  }

  dt,
  summary {
    font-size: 1.2em;
    font-weight: bolder;
  }

  dd {
    margin-left: 1em;
  }

  // footnotes
  a[id^='fnref'] {
    text-decoration: none !important;
  }
  .footnote-backref {
    @media print {
      display: none;
    }
  }

  // table
  table {
    min-width: 240px;
    border-spacing: 0;
    border-collapse: collapse;
    margin: 1.2em auto;
    text-align: left;
    &[id] {
      margin-top: 0.9em;
    }
    th {
      min-width: 60px;
    }
    td,
    th {
      line-height: 1.5em;
      padding: 0.4em 0.8em;
      border: 1px solid $border;
    }
    > tbody:not(:first-child) > tr:first-of-type > td {
      border-top-width: 2px;
    }
    > thead > tr:last-of-type > th {
      border-bottom-width: 2px;
      @media screen {
        position: sticky;
        z-index: 100;
        font-weight: bold;
        top: 0;
      }
    }
    @media screen {
      > thead > tr > th {
        background-color: color.mix($border, white, 40%);
      }
      > tbody > tr > th {
        background-color: color.mix($border, white, 10%);
      }
      > thead > tr:nth-last-child(2n) > th,
      > tbody > tr:nth-child(2n) > td {
        background-color: color.mix($border, white, 30%);
      }
    }
    tr:hover > td {
      background-color: rgba(map-get($docs-primary, A100), 0.1) !important;
    }
  }
}
